services:
  task_mock:
    image: task_mock
    build:
      context: ./mocks/task_manager
      dockerfile: Dockerfile
    env_file:
     - .env 
    ports:
      - ${TASK_PORT}:${TASK_PORT}
    volumes:
      - ./mocks/logs/task_logs:/task_manager/logs
    networks:
      - app-network
    
  archive_mock:
    image: archive_mock
    build:
      context: ./mocks/archive_manager
      dockerfile: Dockerfile
    env_file:
     - .env 
    ports:
      - ${ARCHIVE_PORT}:${ARCHIVE_PORT}
    volumes:
      - ./mocks/logs/archive_logs:/archive_manager/logs
    networks:
      - app-network
      

  accessing:
    image: accessing
    build:
      context: ./accessing
      dockerfile: Dockerfile
    env_file:
     - .env 
    ports:
      - ${CLIENT_PORT}:${CLIENT_PORT}
      - ${ADMIN_PORT}:${ADMIN_PORT}
    volumes:
      - ./logs:/accessing/logs
    networks:
      - app-network
    
  oauth2_server:
    image: oauth2_server
    build:
      context: ./oauth2_server
      dockerfile: Dockerfile
    env_file:
      - .env 
    ports:
      - ${OAUTH_SERVER_PORT}:${OAUTH_SERVER_PORT}
    networks:
      - app-network
    
    
    
  postgres:
    image: postgres:13.3
    restart: always
    environment:
      POSTGRES_USER: ${DBUSER}
      POSTGRES_DB: ${DBNAME}
      POSTGRES_PASSWORD: ${DBPASSWORD}
    env_file:
      - .env
    ports:
      - "${DBPORT}:5432"
    volumes:
      - /tmp/postgres:/var/lib/postgresql/data
    networks:
      - app-network
  
  adminer:
    image: adminer:4.8.1
    restart: always
    env_file:
      - .env
    ports:
      - ${ADMINER_PORT}:8080
    networks:
      - app-network

networks:
  app-network:
    driver: bridge


